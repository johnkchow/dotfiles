if [ -f ~/.bashrc ]; then
  source ~/.bashrc
fi

if [ -f ~/.envprivate ]; then
  source ~/.envprivate
fi

# First run `bash < <(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)`
if [ -f ~/.gvm/scripts/gvm ]; then
  source ~/.gvm/scripts/gvm
fi

if [ -f ~/.cargo/env ]; then
  source ~/.cargo/env
fi

# Node section

# NOTE: First run `brew install nodenv`
eval "$(nodenv init -)"

# if [ -f "/usr/libexec/java_home" ]; then
#   export JAVA_HOME=`/usr/libexec/java_home -v 1.8`
# fi

export JRUBY_OPTS="-J-Xmn512m -J-Xms2048m -J-Xmx2048m --dev -J-XX:+UseParNewGC -J-XX:+UseConcMarkSweepGC"

if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi

# Disables session suspend so that we can use CTRL+s to go back in history search
stty -ixon

alias mvimt="mvim --remote-tab-silent"
alias be="bundle exec"
alias jbe="jruby -G --debug -S"
alias ls='ls -G'
alias ll='ls -hl'
alias bers="DISABLE_SPRING=true be rails s -b 127.0.0.1"

# NOTE: Depends on `brew install llvm`
# Used for clangd
export PATH="/usr/local/opt/llvm/bin:$PATH"

# Requires fzf `brew install fzf`
fb() {
  local branches branch
  branches=$(git branch -vv) &&
  branch=$(echo "$branches" | fzf +m) &&
  echo -n "$branch" | awk '{print $1}' | sed "s/.* //"
}

fbl() {
  git checkout $(fb)
}

fbcl() {
  echo $(fb) | pbcopy
}

fbr() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

cb() {
  echo $(git rev-parse --abbrev-ref HEAD | tr -d '\n')
}

gpu() {
  git push origin $(cb) -u "$@"
}

cleanupLocalBranches() {
  TMPFILE=${TMPDIR}missing-branches
  cat <<EOT > $TMPFILE
# NOTE: Remove any lines that you want to **KEEP**
EOT
  git fetch -p &&  # fetch remotes + prune
    git branch -r | egrep "^\s*origin/.*" | awk '{print $1}' | # only get remotes from origin
    grep -v -f /dev/fd/0 <(git branch -vv) >> $TMPFILE && # filter for local branches that don't have a remote branch
    vim -c "set syntax=gitcommit" $TMPFILE && # allow editing of branches to be deleted
    cat $TMPFILE | grep -v "^#" | awk '{print $1}' | xargs git branch -D # delete branches
}
