if [ -f /opt/homebrew/bin/brew ]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
fi

if [ -f ~/.envprivate ]; then
  source ~/.envprivate
fi

if [ -f ~/.cargo/env ]; then
  source ~/.cargo/env
fi

# This requires `brew install bash-git-prompt`
if [ -f "/opt/homebrew/opt/bash-git-prompt/share/gitprompt.sh" ]; then
  __GIT_PROMPT_DIR="/opt/homebrew/opt/bash-git-prompt/share"
  source "/opt/homebrew/opt/bash-git-prompt/share/gitprompt.sh"
fi

# Disables session suspend so that we can use CTRL+s to go back in history search
stty -ixon

export FZF_DEFAULT_COMMAND='rg --files'

alias mvimt="mvim --remote-tab-silent"
alias ls='ls -G'
alias ll='ls -hl'

# NOTE: Depends on `brew install llvm`
# Used for clangd
export PATH="/usr/local/opt/llvm/bin:$PATH"

# Requires fzf `brew install fzf`
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
fb() {
  local branches branch
  branches=$(git branch -vv) &&
  branch=$(echo "$branches" | fzf +m) &&
  echo -n "$branch" | awk '{print $1}' | sed "s/.* //"
}

fbl() {
  git checkout $(fb)
}

fbcl() {
  echo $(fb) | pbcopy
}

fbr() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

cb() {
  echo $(git rev-parse --abbrev-ref HEAD | tr -d '\n')
}

gpu() {
  git push origin $(cb) -u "$@"
}

gpv() {
  gh pr view -w
}

gpc() {
  gh pr create -w
}

gpl() {
  gh pr list --author "@me" -w
}

cleanupLocalBranches() {
  TMPFILE=${TMPDIR}missing-branches
  cat <<EOT > $TMPFILE
# NOTE: Remove any lines that you want to **KEEP**
EOT
  git fetch -p &&  # fetch remotes + prune
    git branch -r | egrep "^\s*origin/.*" | awk '{print $1}' | # only get remotes from origin
    grep -v -f /dev/fd/0 <(git branch -vv) >> $TMPFILE && # filter for local branches that don't have a remote branch
    vim -c "set syntax=gitcommit" $TMPFILE && # allow editing of branches to be deleted
    cat $TMPFILE | grep -v "^#" | awk '{print $1}' | xargs git branch -D # delete branches
}
