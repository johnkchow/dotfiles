"##### fzf.vim ####
if executable('rg')
  let $FZF_DEFAULT_COMMAND = 'rg --files --ignore-file ~/.ignore-fzf'
elseif executable('ag')
  let $FZF_DEFAULT_COMMAND = 'ag -l --nocolor --path-to-ignore ~/.ignore-fzf -g ""'
endif
" Because fzf.vim uses the :terminal command, we want to change the terminal
" window key from the default ctrl-w; otherwise ctrl-w wouldn't delete the
" word
set termwinkey=<C-L>
" This enables browsing past search queries via CTRL-P and CTRL-N
let g:fzf_history_dir = '~/.local/share/fzf-history'
map <D-t> :FZF <CR>
map <D-p> :call fzf#run({'source': $FZF_DEFAULT_COMMAND . ' -g "!**/test/**" -g "!*.test.js"', 'sink': 'e', 'down': '~40%' }) <CR>
map <D-b> :Buffers<CR>
map <Leader>P :FZF <C-R>=expand('%:h')<CR>
map <Leader>p :FZF <C-R>=expand('$PWD')<CR><CR>

" ##### vim-gitgutter #####
" guibg is set to twilight theme
highlight GitGutterAdd    guifg=#009900 guibg=#34383c ctermfg=2 ctermbg=0
highlight GitGutterChange guifg=#bbbb00 guibg=#34383c ctermfg=3 ctermbg=0
highlight GitGutterDelete guifg=#ff2222 guibg=#34383c ctermfg=1 ctermbg=0

"#####################
"#### NERDTREE ####
"#####################
" Sets NERDTREE to pwd
noremap <Leader>n :execute "NERDTreeToggle"<cr>
noremap <Leader>N :execute "NERDTreeCWD"<cr>
" Will uncollapse NerdTree to current file
noremap <Leader>f :execute "NERDTreeFind"<cr>

"####################
"#### matchit ####
"####################

" Allows `%` key to switch open/close tokens for languages
runtime macros/matchit.vim


"#####################
"#### Regular Vim ####
"#####################

" Disable word wrap
set wrap
set linebreak
set nolist  " list disables linebreak

set nohls

" Remove all trailing whitespaces when saving code files
autocmd BufWritePre *.coffee,*.hamlc,*.haml,*.sass,*.rb,*.rake :%s/\s\+$//e
autocmd BufNewFile,BufRead *.flow setlocal syntax=javascript
autocmd BufNewFile,BufRead *.proto setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2

" Move forward/backward in the error list window
map <F2> :cp<CR>
map <F3> :cn<CR>
map <D-r> :Dispatch! ctags -R<CR>
nnoremap <leader>T :tabc<CR>

" For autocompletion behavior consistent with terminal
set wildmode=longest,list
set wildmenu
nmap <leader>fm :setlocal foldmethod=manual<CR>
nmap <leader>fM :setlocal foldmethod=syntax<CR>


" Adds :JsonTool command to prettify JSON file
" http://stackoverflow.com/questions/16620835/how-to-fix-json-indentation-in-vim
command! -range -nargs=0 -bar JsonTool <line1>,<line2>!python -m json.tool

" ###### vim-go ######

" adds gorename
au FileType go nmap <Leader>e <Plug>(go-rename)

" Fixes autocompletion issue w/ `gopls`
" https://github.com/fatih/vim-go/issues/2193
au FileType go setlocal omnifunc=go#complete#GocodeComplete

" vim-jsx: enables jsx for .js file extensions
let g:jsx_ext_required = 0

" ##### buffergator #####
let g:buffergator_autoexpand_on_split = 0
let g:buffergator_viewport_split_policy = 'B'
let g:buffergator_sort_regime = 'mru'
let g:buffergator_show_full_directory_path = 0
let g:buffergator_suppress_keymaps=1
nnoremap <silent> <Leader>b :BuffergatorOpen<CR>
nnoremap <silent> <Leader>B :BuffergatorClose<CR>

" ##### Taboo ######

" Tabs will also be saved in sessions
set sessionoptions+=tabpages,globals


" ##### NERDCommenter ######
let g:NERDSpaceDelims = 1
if has("gui_macvim") && has("gui_running")
  map <D-/> :call NERDComment(0,"Invert")<CR>
  imap <D-/> <Esc>:call NERDComment(0,"Invert")<CR>i
else
  map <leader>/ :call NERDComment(0,"Invert")<CR>
endif


" ###### ALE ######

" NOTE: This only works after plugin is loaded, so cannot add this to
" .vimrc.before
nmap <leader>F :ALEFix<CR>

" ##### coc.nvim #####

" " don't give |ins-completion-menu| messages in the message buffer
set shortmess+=c

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1):
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>


" ###### rust.vim ######
let g:rustfmt_autosave = 1
let g:rustfmt_fail_silently = 1

filetype plugin indent on " Needs to run before vim-plug

" ###### tagbar ######
nmap <F8> :TagbarToggle<CR>
